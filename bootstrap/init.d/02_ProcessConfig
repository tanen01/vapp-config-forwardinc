echo "[02] Running 'ProcessConfig'"

mkdir -p /solution/$CONFIG/config/knowledge
FILE=/solution/$CONFIG/config/knowledge/dsas.dxc

CONFIGURED=/solution/.configured
if [ ! -z "${DESTINATION_STATUS}" ]; then
	CONFIGURED=${DESTINATION_STATUS}/.configured
fi

# Configure dsa knowledge file. Write all dsas into dsas.dxc
while true; do
	allDsas=$(curl -s -XGET $ETCD_SERVICE/v2/keys/dsas)
	dsasKeyCheck=$(echo "$allDsas" | jq -r ".node.key")
	if [ "$dsasKeyCheck" != "/dsas" ]; then
		echo "[02] unexpected output for allDsas: $allDsas"
		sleep 10
		continue
	fi
	
	numDsas=$(echo "$allDsas" | jq -r ".node.nodes | length")
	if [ $numDsas -le 0 ]; then
		echo "[02] no dsas in etcd. allDsas: $allDsas"
		sleep 10
		continue
	fi
	
	# maxIndex is the largest modifiedIndex. +1 to this value and use it as the waitIndex in the next step
	maxIndex=$(echo $allDsas | jq '.node.nodes | max_by(.modifiedIndex) | .modifiedIndex + 1')
	echo "[02] numDsas:$numDsas maxIndex:$maxIndex"
	if ! echo "$maxIndex" | egrep -q '^[0-9]+$'; then
		echo "[02] invalid maxIndex. allDsas: $allDsas"
		sleep 10
		continue
	fi
	
	cat <<EOM >$FILE
# This file is automatically generated

EOM

	# My dsa number in first position
	echo "$myDsaNumber" > ${CONFIGURED}.tmp
	i=0
	while [ $i -lt $numDsas ]; do
		nodeKey=`echo $allDsas | jq -r ".node.nodes[$i].key"`
		nodeValue=`echo $allDsas | jq -r ".node.nodes[$i].value"`
		echo "[02] nodeKey:$nodeKey nodeValue:$nodeValue"
		
		i=`expr $i + 1`
		
		if [ "$nodeKey" == "null" ] || [ "$nodeValue" == "null" ] || [ -z "$nodeKey" ] || [ -z "$nodeValue" ]; then
			continue
		fi
	
		dsaNumber=`echo $nodeKey | cut -d/ -f 3`
		dsaIP=`echo $nodeValue | cut -d/ -f 2`
		echo "[02] dsaNumber:$dsaNumber dsaIP:$dsaIP"
		
		if [ -z "$dsaNumber" ] || [ -z "$dsaIP" ]; then
			continue
		fi
		
		if [ "$myDsaNumber" -ne "$dsaNumber" ]; then
			echo "$dsaNumber" >> ${CONFIGURED}.tmp
		fi
	
		cat <<EOM >>$FILE
set dsa "dsa$dsaNumber" =
{
    prefix        = <dc ca><dc ForwardInc>
    dsa-name      = <dc ca><dc ForwardInc><cn "dsa$dsaNumber">
    dsa-password  = "password"
    address       = tcp "$dsaIP" port 2389
    disp-psap     = DISP
    snmp-port     = 2389
    console-port  = 2345
    dsa-flags     = multi-write, load-share, no-service-while-recovering
    trust-flags   = allow-check-password
};


EOM
	done
	
	# All done. Break loop.
	break 
done

# Configure dxagent
rm -rf /solution/$CONFIG/dxagent-config
mkdir -p /solution/$CONFIG/dxagent-config
cat /solution/$CONFIG/../common/dxagent-template/SAMPLE.gunicorn-config.py | \
	sed -e "s#^certfile =.*\$#certfile = '/solution/$CONFIG/config/ssld/personalities/dsa$myDsaNumber.pem'#g" | \
	sed -e "s#^keyfile =.*\$#keyfile = '/solution/$CONFIG/config/ssld/personalities/dsa$myDsaNumber.pem'#g" | \
	sed -e "s#^ca_certs =.*\$#ca_certs = '/solution/$CONFIG/config/ssld/trusted.pem'#g" \
	> /solution/$CONFIG/dxagent-config/gunicorn-config.py
cp /solution/$CONFIG/../common/dxagent-template/SAMPLE.gunicorn-logging.conf /solution/$CONFIG/dxagent-config/gunicorn-logging.conf

rm -rf /solution/$CONFIG/config/servers
mkdir -p /solution/$CONFIG/config/servers
cp -f /solution/common/servers_template/dsa.dxi /solution/$CONFIG/config/servers/dsa$myDsaNumber.dxi
mv -f ${CONFIGURED}.tmp ${CONFIGURED}

echo "[02] wrote my dsaNumber $myDsaNumber. Total dsa config $numDsas"

